<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wwinter.mapper.XStatementsWithSortingMapper">
  <resultMap id="BaseResultMap" type="cn.wwinter.model.XStatementsWithSorting">
    <result column="db" jdbcType="VARCHAR" property="db" />
    <result column="exec_count" jdbcType="BIGINT" property="execCount" />
    <result column="total_latency" jdbcType="BIGINT" property="totalLatency" />
    <result column="sort_merge_passes" jdbcType="BIGINT" property="sortMergePasses" />
    <result column="avg_sort_merges" jdbcType="DECIMAL" property="avgSortMerges" />
    <result column="sorts_using_scans" jdbcType="BIGINT" property="sortsUsingScans" />
    <result column="sort_using_range" jdbcType="BIGINT" property="sortUsingRange" />
    <result column="rows_sorted" jdbcType="BIGINT" property="rowsSorted" />
    <result column="avg_rows_sorted" jdbcType="DECIMAL" property="avgRowsSorted" />
    <result column="first_seen" jdbcType="TIMESTAMP" property="firstSeen" />
    <result column="last_seen" jdbcType="TIMESTAMP" property="lastSeen" />
    <result column="digest" jdbcType="VARCHAR" property="digest" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.wwinter.model.XStatementsWithSorting">
    <result column="query" jdbcType="LONGVARCHAR" property="query" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    db, exec_count, total_latency, sort_merge_passes, avg_sort_merges, sorts_using_scans, 
    sort_using_range, rows_sorted, avg_rows_sorted, first_seen, last_seen, digest
  </sql>
  <sql id="Blob_Column_List">
    query
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.wwinter.model.XStatementsWithSortingExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from x$statements_with_sorting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.wwinter.model.XStatementsWithSortingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from x$statements_with_sorting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.wwinter.model.XStatementsWithSortingExample">
    delete from x$statements_with_sorting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wwinter.model.XStatementsWithSorting">
    insert into x$statements_with_sorting (db, exec_count, total_latency, 
      sort_merge_passes, avg_sort_merges, sorts_using_scans, 
      sort_using_range, rows_sorted, avg_rows_sorted, 
      first_seen, last_seen, digest, 
      query)
    values (#{db,jdbcType=VARCHAR}, #{execCount,jdbcType=BIGINT}, #{totalLatency,jdbcType=BIGINT}, 
      #{sortMergePasses,jdbcType=BIGINT}, #{avgSortMerges,jdbcType=DECIMAL}, #{sortsUsingScans,jdbcType=BIGINT}, 
      #{sortUsingRange,jdbcType=BIGINT}, #{rowsSorted,jdbcType=BIGINT}, #{avgRowsSorted,jdbcType=DECIMAL}, 
      #{firstSeen,jdbcType=TIMESTAMP}, #{lastSeen,jdbcType=TIMESTAMP}, #{digest,jdbcType=VARCHAR}, 
      #{query,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.wwinter.model.XStatementsWithSorting">
    insert into x$statements_with_sorting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="db != null">
        db,
      </if>
      <if test="execCount != null">
        exec_count,
      </if>
      <if test="totalLatency != null">
        total_latency,
      </if>
      <if test="sortMergePasses != null">
        sort_merge_passes,
      </if>
      <if test="avgSortMerges != null">
        avg_sort_merges,
      </if>
      <if test="sortsUsingScans != null">
        sorts_using_scans,
      </if>
      <if test="sortUsingRange != null">
        sort_using_range,
      </if>
      <if test="rowsSorted != null">
        rows_sorted,
      </if>
      <if test="avgRowsSorted != null">
        avg_rows_sorted,
      </if>
      <if test="firstSeen != null">
        first_seen,
      </if>
      <if test="lastSeen != null">
        last_seen,
      </if>
      <if test="digest != null">
        digest,
      </if>
      <if test="query != null">
        query,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="db != null">
        #{db,jdbcType=VARCHAR},
      </if>
      <if test="execCount != null">
        #{execCount,jdbcType=BIGINT},
      </if>
      <if test="totalLatency != null">
        #{totalLatency,jdbcType=BIGINT},
      </if>
      <if test="sortMergePasses != null">
        #{sortMergePasses,jdbcType=BIGINT},
      </if>
      <if test="avgSortMerges != null">
        #{avgSortMerges,jdbcType=DECIMAL},
      </if>
      <if test="sortsUsingScans != null">
        #{sortsUsingScans,jdbcType=BIGINT},
      </if>
      <if test="sortUsingRange != null">
        #{sortUsingRange,jdbcType=BIGINT},
      </if>
      <if test="rowsSorted != null">
        #{rowsSorted,jdbcType=BIGINT},
      </if>
      <if test="avgRowsSorted != null">
        #{avgRowsSorted,jdbcType=DECIMAL},
      </if>
      <if test="firstSeen != null">
        #{firstSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="lastSeen != null">
        #{lastSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="digest != null">
        #{digest,jdbcType=VARCHAR},
      </if>
      <if test="query != null">
        #{query,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wwinter.model.XStatementsWithSortingExample" resultType="java.lang.Integer">
    select count(*) from x$statements_with_sorting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update x$statements_with_sorting
    <set>
      <if test="record.db != null">
        db = #{record.db,jdbcType=VARCHAR},
      </if>
      <if test="record.execCount != null">
        exec_count = #{record.execCount,jdbcType=BIGINT},
      </if>
      <if test="record.totalLatency != null">
        total_latency = #{record.totalLatency,jdbcType=BIGINT},
      </if>
      <if test="record.sortMergePasses != null">
        sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      </if>
      <if test="record.avgSortMerges != null">
        avg_sort_merges = #{record.avgSortMerges,jdbcType=DECIMAL},
      </if>
      <if test="record.sortsUsingScans != null">
        sorts_using_scans = #{record.sortsUsingScans,jdbcType=BIGINT},
      </if>
      <if test="record.sortUsingRange != null">
        sort_using_range = #{record.sortUsingRange,jdbcType=BIGINT},
      </if>
      <if test="record.rowsSorted != null">
        rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      </if>
      <if test="record.avgRowsSorted != null">
        avg_rows_sorted = #{record.avgRowsSorted,jdbcType=DECIMAL},
      </if>
      <if test="record.firstSeen != null">
        first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastSeen != null">
        last_seen = #{record.lastSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="record.digest != null">
        digest = #{record.digest,jdbcType=VARCHAR},
      </if>
      <if test="record.query != null">
        query = #{record.query,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update x$statements_with_sorting
    set db = #{record.db,jdbcType=VARCHAR},
      exec_count = #{record.execCount,jdbcType=BIGINT},
      total_latency = #{record.totalLatency,jdbcType=BIGINT},
      sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      avg_sort_merges = #{record.avgSortMerges,jdbcType=DECIMAL},
      sorts_using_scans = #{record.sortsUsingScans,jdbcType=BIGINT},
      sort_using_range = #{record.sortUsingRange,jdbcType=BIGINT},
      rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      avg_rows_sorted = #{record.avgRowsSorted,jdbcType=DECIMAL},
      first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      last_seen = #{record.lastSeen,jdbcType=TIMESTAMP},
      digest = #{record.digest,jdbcType=VARCHAR},
      query = #{record.query,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update x$statements_with_sorting
    set db = #{record.db,jdbcType=VARCHAR},
      exec_count = #{record.execCount,jdbcType=BIGINT},
      total_latency = #{record.totalLatency,jdbcType=BIGINT},
      sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      avg_sort_merges = #{record.avgSortMerges,jdbcType=DECIMAL},
      sorts_using_scans = #{record.sortsUsingScans,jdbcType=BIGINT},
      sort_using_range = #{record.sortUsingRange,jdbcType=BIGINT},
      rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      avg_rows_sorted = #{record.avgRowsSorted,jdbcType=DECIMAL},
      first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      last_seen = #{record.lastSeen,jdbcType=TIMESTAMP},
      digest = #{record.digest,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>