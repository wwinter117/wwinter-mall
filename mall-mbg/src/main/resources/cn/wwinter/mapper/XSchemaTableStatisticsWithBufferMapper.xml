<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wwinter.mapper.XSchemaTableStatisticsWithBufferMapper">
  <resultMap id="BaseResultMap" type="cn.wwinter.model.XSchemaTableStatisticsWithBuffer">
    <result column="table_schema" jdbcType="VARCHAR" property="tableSchema" />
    <result column="table_name" jdbcType="VARCHAR" property="tableName" />
    <result column="rows_fetched" jdbcType="BIGINT" property="rowsFetched" />
    <result column="fetch_latency" jdbcType="BIGINT" property="fetchLatency" />
    <result column="rows_inserted" jdbcType="BIGINT" property="rowsInserted" />
    <result column="insert_latency" jdbcType="BIGINT" property="insertLatency" />
    <result column="rows_updated" jdbcType="BIGINT" property="rowsUpdated" />
    <result column="update_latency" jdbcType="BIGINT" property="updateLatency" />
    <result column="rows_deleted" jdbcType="BIGINT" property="rowsDeleted" />
    <result column="delete_latency" jdbcType="BIGINT" property="deleteLatency" />
    <result column="io_read_requests" jdbcType="DECIMAL" property="ioReadRequests" />
    <result column="io_read" jdbcType="DECIMAL" property="ioRead" />
    <result column="io_read_latency" jdbcType="DECIMAL" property="ioReadLatency" />
    <result column="io_write_requests" jdbcType="DECIMAL" property="ioWriteRequests" />
    <result column="io_write" jdbcType="DECIMAL" property="ioWrite" />
    <result column="io_write_latency" jdbcType="DECIMAL" property="ioWriteLatency" />
    <result column="io_misc_requests" jdbcType="DECIMAL" property="ioMiscRequests" />
    <result column="io_misc_latency" jdbcType="DECIMAL" property="ioMiscLatency" />
    <result column="innodb_buffer_allocated" jdbcType="DECIMAL" property="innodbBufferAllocated" />
    <result column="innodb_buffer_data" jdbcType="DECIMAL" property="innodbBufferData" />
    <result column="innodb_buffer_free" jdbcType="DECIMAL" property="innodbBufferFree" />
    <result column="innodb_buffer_pages" jdbcType="BIGINT" property="innodbBufferPages" />
    <result column="innodb_buffer_pages_hashed" jdbcType="BIGINT" property="innodbBufferPagesHashed" />
    <result column="innodb_buffer_pages_old" jdbcType="BIGINT" property="innodbBufferPagesOld" />
    <result column="innodb_buffer_rows_cached" jdbcType="DECIMAL" property="innodbBufferRowsCached" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    table_schema, table_name, rows_fetched, fetch_latency, rows_inserted, insert_latency, 
    rows_updated, update_latency, rows_deleted, delete_latency, io_read_requests, io_read, 
    io_read_latency, io_write_requests, io_write, io_write_latency, io_misc_requests, 
    io_misc_latency, innodb_buffer_allocated, innodb_buffer_data, innodb_buffer_free, 
    innodb_buffer_pages, innodb_buffer_pages_hashed, innodb_buffer_pages_old, innodb_buffer_rows_cached
  </sql>
  <select id="selectByExample" parameterType="cn.wwinter.model.XSchemaTableStatisticsWithBufferExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from x$schema_table_statistics_with_buffer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.wwinter.model.XSchemaTableStatisticsWithBufferExample">
    delete from x$schema_table_statistics_with_buffer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wwinter.model.XSchemaTableStatisticsWithBuffer">
    insert into x$schema_table_statistics_with_buffer (table_schema, table_name, rows_fetched, 
      fetch_latency, rows_inserted, insert_latency, 
      rows_updated, update_latency, rows_deleted, 
      delete_latency, io_read_requests, io_read, 
      io_read_latency, io_write_requests, io_write, 
      io_write_latency, io_misc_requests, io_misc_latency, 
      innodb_buffer_allocated, innodb_buffer_data, 
      innodb_buffer_free, innodb_buffer_pages, innodb_buffer_pages_hashed, 
      innodb_buffer_pages_old, innodb_buffer_rows_cached
      )
    values (#{tableSchema,jdbcType=VARCHAR}, #{tableName,jdbcType=VARCHAR}, #{rowsFetched,jdbcType=BIGINT}, 
      #{fetchLatency,jdbcType=BIGINT}, #{rowsInserted,jdbcType=BIGINT}, #{insertLatency,jdbcType=BIGINT}, 
      #{rowsUpdated,jdbcType=BIGINT}, #{updateLatency,jdbcType=BIGINT}, #{rowsDeleted,jdbcType=BIGINT}, 
      #{deleteLatency,jdbcType=BIGINT}, #{ioReadRequests,jdbcType=DECIMAL}, #{ioRead,jdbcType=DECIMAL}, 
      #{ioReadLatency,jdbcType=DECIMAL}, #{ioWriteRequests,jdbcType=DECIMAL}, #{ioWrite,jdbcType=DECIMAL}, 
      #{ioWriteLatency,jdbcType=DECIMAL}, #{ioMiscRequests,jdbcType=DECIMAL}, #{ioMiscLatency,jdbcType=DECIMAL}, 
      #{innodbBufferAllocated,jdbcType=DECIMAL}, #{innodbBufferData,jdbcType=DECIMAL}, 
      #{innodbBufferFree,jdbcType=DECIMAL}, #{innodbBufferPages,jdbcType=BIGINT}, #{innodbBufferPagesHashed,jdbcType=BIGINT}, 
      #{innodbBufferPagesOld,jdbcType=BIGINT}, #{innodbBufferRowsCached,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.wwinter.model.XSchemaTableStatisticsWithBuffer">
    insert into x$schema_table_statistics_with_buffer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tableSchema != null">
        table_schema,
      </if>
      <if test="tableName != null">
        table_name,
      </if>
      <if test="rowsFetched != null">
        rows_fetched,
      </if>
      <if test="fetchLatency != null">
        fetch_latency,
      </if>
      <if test="rowsInserted != null">
        rows_inserted,
      </if>
      <if test="insertLatency != null">
        insert_latency,
      </if>
      <if test="rowsUpdated != null">
        rows_updated,
      </if>
      <if test="updateLatency != null">
        update_latency,
      </if>
      <if test="rowsDeleted != null">
        rows_deleted,
      </if>
      <if test="deleteLatency != null">
        delete_latency,
      </if>
      <if test="ioReadRequests != null">
        io_read_requests,
      </if>
      <if test="ioRead != null">
        io_read,
      </if>
      <if test="ioReadLatency != null">
        io_read_latency,
      </if>
      <if test="ioWriteRequests != null">
        io_write_requests,
      </if>
      <if test="ioWrite != null">
        io_write,
      </if>
      <if test="ioWriteLatency != null">
        io_write_latency,
      </if>
      <if test="ioMiscRequests != null">
        io_misc_requests,
      </if>
      <if test="ioMiscLatency != null">
        io_misc_latency,
      </if>
      <if test="innodbBufferAllocated != null">
        innodb_buffer_allocated,
      </if>
      <if test="innodbBufferData != null">
        innodb_buffer_data,
      </if>
      <if test="innodbBufferFree != null">
        innodb_buffer_free,
      </if>
      <if test="innodbBufferPages != null">
        innodb_buffer_pages,
      </if>
      <if test="innodbBufferPagesHashed != null">
        innodb_buffer_pages_hashed,
      </if>
      <if test="innodbBufferPagesOld != null">
        innodb_buffer_pages_old,
      </if>
      <if test="innodbBufferRowsCached != null">
        innodb_buffer_rows_cached,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tableSchema != null">
        #{tableSchema,jdbcType=VARCHAR},
      </if>
      <if test="tableName != null">
        #{tableName,jdbcType=VARCHAR},
      </if>
      <if test="rowsFetched != null">
        #{rowsFetched,jdbcType=BIGINT},
      </if>
      <if test="fetchLatency != null">
        #{fetchLatency,jdbcType=BIGINT},
      </if>
      <if test="rowsInserted != null">
        #{rowsInserted,jdbcType=BIGINT},
      </if>
      <if test="insertLatency != null">
        #{insertLatency,jdbcType=BIGINT},
      </if>
      <if test="rowsUpdated != null">
        #{rowsUpdated,jdbcType=BIGINT},
      </if>
      <if test="updateLatency != null">
        #{updateLatency,jdbcType=BIGINT},
      </if>
      <if test="rowsDeleted != null">
        #{rowsDeleted,jdbcType=BIGINT},
      </if>
      <if test="deleteLatency != null">
        #{deleteLatency,jdbcType=BIGINT},
      </if>
      <if test="ioReadRequests != null">
        #{ioReadRequests,jdbcType=DECIMAL},
      </if>
      <if test="ioRead != null">
        #{ioRead,jdbcType=DECIMAL},
      </if>
      <if test="ioReadLatency != null">
        #{ioReadLatency,jdbcType=DECIMAL},
      </if>
      <if test="ioWriteRequests != null">
        #{ioWriteRequests,jdbcType=DECIMAL},
      </if>
      <if test="ioWrite != null">
        #{ioWrite,jdbcType=DECIMAL},
      </if>
      <if test="ioWriteLatency != null">
        #{ioWriteLatency,jdbcType=DECIMAL},
      </if>
      <if test="ioMiscRequests != null">
        #{ioMiscRequests,jdbcType=DECIMAL},
      </if>
      <if test="ioMiscLatency != null">
        #{ioMiscLatency,jdbcType=DECIMAL},
      </if>
      <if test="innodbBufferAllocated != null">
        #{innodbBufferAllocated,jdbcType=DECIMAL},
      </if>
      <if test="innodbBufferData != null">
        #{innodbBufferData,jdbcType=DECIMAL},
      </if>
      <if test="innodbBufferFree != null">
        #{innodbBufferFree,jdbcType=DECIMAL},
      </if>
      <if test="innodbBufferPages != null">
        #{innodbBufferPages,jdbcType=BIGINT},
      </if>
      <if test="innodbBufferPagesHashed != null">
        #{innodbBufferPagesHashed,jdbcType=BIGINT},
      </if>
      <if test="innodbBufferPagesOld != null">
        #{innodbBufferPagesOld,jdbcType=BIGINT},
      </if>
      <if test="innodbBufferRowsCached != null">
        #{innodbBufferRowsCached,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wwinter.model.XSchemaTableStatisticsWithBufferExample" resultType="java.lang.Integer">
    select count(*) from x$schema_table_statistics_with_buffer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update x$schema_table_statistics_with_buffer
    <set>
      <if test="record.tableSchema != null">
        table_schema = #{record.tableSchema,jdbcType=VARCHAR},
      </if>
      <if test="record.tableName != null">
        table_name = #{record.tableName,jdbcType=VARCHAR},
      </if>
      <if test="record.rowsFetched != null">
        rows_fetched = #{record.rowsFetched,jdbcType=BIGINT},
      </if>
      <if test="record.fetchLatency != null">
        fetch_latency = #{record.fetchLatency,jdbcType=BIGINT},
      </if>
      <if test="record.rowsInserted != null">
        rows_inserted = #{record.rowsInserted,jdbcType=BIGINT},
      </if>
      <if test="record.insertLatency != null">
        insert_latency = #{record.insertLatency,jdbcType=BIGINT},
      </if>
      <if test="record.rowsUpdated != null">
        rows_updated = #{record.rowsUpdated,jdbcType=BIGINT},
      </if>
      <if test="record.updateLatency != null">
        update_latency = #{record.updateLatency,jdbcType=BIGINT},
      </if>
      <if test="record.rowsDeleted != null">
        rows_deleted = #{record.rowsDeleted,jdbcType=BIGINT},
      </if>
      <if test="record.deleteLatency != null">
        delete_latency = #{record.deleteLatency,jdbcType=BIGINT},
      </if>
      <if test="record.ioReadRequests != null">
        io_read_requests = #{record.ioReadRequests,jdbcType=DECIMAL},
      </if>
      <if test="record.ioRead != null">
        io_read = #{record.ioRead,jdbcType=DECIMAL},
      </if>
      <if test="record.ioReadLatency != null">
        io_read_latency = #{record.ioReadLatency,jdbcType=DECIMAL},
      </if>
      <if test="record.ioWriteRequests != null">
        io_write_requests = #{record.ioWriteRequests,jdbcType=DECIMAL},
      </if>
      <if test="record.ioWrite != null">
        io_write = #{record.ioWrite,jdbcType=DECIMAL},
      </if>
      <if test="record.ioWriteLatency != null">
        io_write_latency = #{record.ioWriteLatency,jdbcType=DECIMAL},
      </if>
      <if test="record.ioMiscRequests != null">
        io_misc_requests = #{record.ioMiscRequests,jdbcType=DECIMAL},
      </if>
      <if test="record.ioMiscLatency != null">
        io_misc_latency = #{record.ioMiscLatency,jdbcType=DECIMAL},
      </if>
      <if test="record.innodbBufferAllocated != null">
        innodb_buffer_allocated = #{record.innodbBufferAllocated,jdbcType=DECIMAL},
      </if>
      <if test="record.innodbBufferData != null">
        innodb_buffer_data = #{record.innodbBufferData,jdbcType=DECIMAL},
      </if>
      <if test="record.innodbBufferFree != null">
        innodb_buffer_free = #{record.innodbBufferFree,jdbcType=DECIMAL},
      </if>
      <if test="record.innodbBufferPages != null">
        innodb_buffer_pages = #{record.innodbBufferPages,jdbcType=BIGINT},
      </if>
      <if test="record.innodbBufferPagesHashed != null">
        innodb_buffer_pages_hashed = #{record.innodbBufferPagesHashed,jdbcType=BIGINT},
      </if>
      <if test="record.innodbBufferPagesOld != null">
        innodb_buffer_pages_old = #{record.innodbBufferPagesOld,jdbcType=BIGINT},
      </if>
      <if test="record.innodbBufferRowsCached != null">
        innodb_buffer_rows_cached = #{record.innodbBufferRowsCached,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update x$schema_table_statistics_with_buffer
    set table_schema = #{record.tableSchema,jdbcType=VARCHAR},
      table_name = #{record.tableName,jdbcType=VARCHAR},
      rows_fetched = #{record.rowsFetched,jdbcType=BIGINT},
      fetch_latency = #{record.fetchLatency,jdbcType=BIGINT},
      rows_inserted = #{record.rowsInserted,jdbcType=BIGINT},
      insert_latency = #{record.insertLatency,jdbcType=BIGINT},
      rows_updated = #{record.rowsUpdated,jdbcType=BIGINT},
      update_latency = #{record.updateLatency,jdbcType=BIGINT},
      rows_deleted = #{record.rowsDeleted,jdbcType=BIGINT},
      delete_latency = #{record.deleteLatency,jdbcType=BIGINT},
      io_read_requests = #{record.ioReadRequests,jdbcType=DECIMAL},
      io_read = #{record.ioRead,jdbcType=DECIMAL},
      io_read_latency = #{record.ioReadLatency,jdbcType=DECIMAL},
      io_write_requests = #{record.ioWriteRequests,jdbcType=DECIMAL},
      io_write = #{record.ioWrite,jdbcType=DECIMAL},
      io_write_latency = #{record.ioWriteLatency,jdbcType=DECIMAL},
      io_misc_requests = #{record.ioMiscRequests,jdbcType=DECIMAL},
      io_misc_latency = #{record.ioMiscLatency,jdbcType=DECIMAL},
      innodb_buffer_allocated = #{record.innodbBufferAllocated,jdbcType=DECIMAL},
      innodb_buffer_data = #{record.innodbBufferData,jdbcType=DECIMAL},
      innodb_buffer_free = #{record.innodbBufferFree,jdbcType=DECIMAL},
      innodb_buffer_pages = #{record.innodbBufferPages,jdbcType=BIGINT},
      innodb_buffer_pages_hashed = #{record.innodbBufferPagesHashed,jdbcType=BIGINT},
      innodb_buffer_pages_old = #{record.innodbBufferPagesOld,jdbcType=BIGINT},
      innodb_buffer_rows_cached = #{record.innodbBufferRowsCached,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>