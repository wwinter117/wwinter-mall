<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wwinter.mapper.ReplicationGroupMemberActionsMapper">
  <resultMap id="BaseResultMap" type="cn.wwinter.model.ReplicationGroupMemberActions">
    <id column="name" jdbcType="CHAR" property="name" />
    <id column="event" jdbcType="CHAR" property="event" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="type" jdbcType="CHAR" property="type" />
    <result column="priority" jdbcType="TINYINT" property="priority" />
    <result column="error_handling" jdbcType="CHAR" property="errorHandling" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    name, event, enabled, type, priority, error_handling
  </sql>
  <select id="selectByExample" parameterType="cn.wwinter.model.ReplicationGroupMemberActionsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replication_group_member_actions
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from replication_group_member_actions
    where name = #{name,jdbcType=CHAR}
      and event = #{event,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from replication_group_member_actions
    where name = #{name,jdbcType=CHAR}
      and event = #{event,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.wwinter.model.ReplicationGroupMemberActionsExample">
    delete from replication_group_member_actions
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wwinter.model.ReplicationGroupMemberActions">
    insert into replication_group_member_actions (name, event, enabled, type, 
      priority, error_handling)
    values (#{name,jdbcType=CHAR}, #{event,jdbcType=CHAR}, #{enabled,jdbcType=BIT}, #{type,jdbcType=CHAR}, 
      #{priority,jdbcType=TINYINT}, #{errorHandling,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.wwinter.model.ReplicationGroupMemberActions">
    insert into replication_group_member_actions
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="event != null">
        event,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="errorHandling != null">
        error_handling,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=CHAR},
      </if>
      <if test="event != null">
        #{event,jdbcType=CHAR},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="type != null">
        #{type,jdbcType=CHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=TINYINT},
      </if>
      <if test="errorHandling != null">
        #{errorHandling,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wwinter.model.ReplicationGroupMemberActionsExample" resultType="java.lang.Integer">
    select count(*) from replication_group_member_actions
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update replication_group_member_actions
    <set>
      <if test="record.name != null">
        name = #{record.name,jdbcType=CHAR},
      </if>
      <if test="record.event != null">
        event = #{record.event,jdbcType=CHAR},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.priority != null">
        priority = #{record.priority,jdbcType=TINYINT},
      </if>
      <if test="record.errorHandling != null">
        error_handling = #{record.errorHandling,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update replication_group_member_actions
    set name = #{record.name,jdbcType=CHAR},
      event = #{record.event,jdbcType=CHAR},
      enabled = #{record.enabled,jdbcType=BIT},
      type = #{record.type,jdbcType=CHAR},
      priority = #{record.priority,jdbcType=TINYINT},
      error_handling = #{record.errorHandling,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.wwinter.model.ReplicationGroupMemberActions">
    update replication_group_member_actions
    <set>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=CHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=TINYINT},
      </if>
      <if test="errorHandling != null">
        error_handling = #{errorHandling,jdbcType=CHAR},
      </if>
    </set>
    where name = #{name,jdbcType=CHAR}
      and event = #{event,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.wwinter.model.ReplicationGroupMemberActions">
    update replication_group_member_actions
    set enabled = #{enabled,jdbcType=BIT},
      type = #{type,jdbcType=CHAR},
      priority = #{priority,jdbcType=TINYINT},
      error_handling = #{errorHandling,jdbcType=CHAR}
    where name = #{name,jdbcType=CHAR}
      and event = #{event,jdbcType=CHAR}
  </update>
</mapper>