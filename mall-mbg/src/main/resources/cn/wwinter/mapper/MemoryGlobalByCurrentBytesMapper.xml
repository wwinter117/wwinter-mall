<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wwinter.mapper.MemoryGlobalByCurrentBytesMapper">
  <resultMap id="BaseResultMap" type="cn.wwinter.model.MemoryGlobalByCurrentBytes">
    <result column="event_name" jdbcType="VARCHAR" property="eventName" />
    <result column="current_count" jdbcType="BIGINT" property="currentCount" />
    <result column="current_alloc" jdbcType="VARCHAR" property="currentAlloc" />
    <result column="current_avg_alloc" jdbcType="VARCHAR" property="currentAvgAlloc" />
    <result column="high_count" jdbcType="BIGINT" property="highCount" />
    <result column="high_alloc" jdbcType="VARCHAR" property="highAlloc" />
    <result column="high_avg_alloc" jdbcType="VARCHAR" property="highAvgAlloc" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    event_name, current_count, current_alloc, current_avg_alloc, high_count, high_alloc, 
    high_avg_alloc
  </sql>
  <select id="selectByExample" parameterType="cn.wwinter.model.MemoryGlobalByCurrentBytesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from memory_global_by_current_bytes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.wwinter.model.MemoryGlobalByCurrentBytesExample">
    delete from memory_global_by_current_bytes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wwinter.model.MemoryGlobalByCurrentBytes">
    insert into memory_global_by_current_bytes (event_name, current_count, current_alloc, 
      current_avg_alloc, high_count, high_alloc, 
      high_avg_alloc)
    values (#{eventName,jdbcType=VARCHAR}, #{currentCount,jdbcType=BIGINT}, #{currentAlloc,jdbcType=VARCHAR}, 
      #{currentAvgAlloc,jdbcType=VARCHAR}, #{highCount,jdbcType=BIGINT}, #{highAlloc,jdbcType=VARCHAR}, 
      #{highAvgAlloc,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.wwinter.model.MemoryGlobalByCurrentBytes">
    insert into memory_global_by_current_bytes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="eventName != null">
        event_name,
      </if>
      <if test="currentCount != null">
        current_count,
      </if>
      <if test="currentAlloc != null">
        current_alloc,
      </if>
      <if test="currentAvgAlloc != null">
        current_avg_alloc,
      </if>
      <if test="highCount != null">
        high_count,
      </if>
      <if test="highAlloc != null">
        high_alloc,
      </if>
      <if test="highAvgAlloc != null">
        high_avg_alloc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="eventName != null">
        #{eventName,jdbcType=VARCHAR},
      </if>
      <if test="currentCount != null">
        #{currentCount,jdbcType=BIGINT},
      </if>
      <if test="currentAlloc != null">
        #{currentAlloc,jdbcType=VARCHAR},
      </if>
      <if test="currentAvgAlloc != null">
        #{currentAvgAlloc,jdbcType=VARCHAR},
      </if>
      <if test="highCount != null">
        #{highCount,jdbcType=BIGINT},
      </if>
      <if test="highAlloc != null">
        #{highAlloc,jdbcType=VARCHAR},
      </if>
      <if test="highAvgAlloc != null">
        #{highAvgAlloc,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wwinter.model.MemoryGlobalByCurrentBytesExample" resultType="java.lang.Integer">
    select count(*) from memory_global_by_current_bytes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update memory_global_by_current_bytes
    <set>
      <if test="record.eventName != null">
        event_name = #{record.eventName,jdbcType=VARCHAR},
      </if>
      <if test="record.currentCount != null">
        current_count = #{record.currentCount,jdbcType=BIGINT},
      </if>
      <if test="record.currentAlloc != null">
        current_alloc = #{record.currentAlloc,jdbcType=VARCHAR},
      </if>
      <if test="record.currentAvgAlloc != null">
        current_avg_alloc = #{record.currentAvgAlloc,jdbcType=VARCHAR},
      </if>
      <if test="record.highCount != null">
        high_count = #{record.highCount,jdbcType=BIGINT},
      </if>
      <if test="record.highAlloc != null">
        high_alloc = #{record.highAlloc,jdbcType=VARCHAR},
      </if>
      <if test="record.highAvgAlloc != null">
        high_avg_alloc = #{record.highAvgAlloc,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update memory_global_by_current_bytes
    set event_name = #{record.eventName,jdbcType=VARCHAR},
      current_count = #{record.currentCount,jdbcType=BIGINT},
      current_alloc = #{record.currentAlloc,jdbcType=VARCHAR},
      current_avg_alloc = #{record.currentAvgAlloc,jdbcType=VARCHAR},
      high_count = #{record.highCount,jdbcType=BIGINT},
      high_alloc = #{record.highAlloc,jdbcType=VARCHAR},
      high_avg_alloc = #{record.highAvgAlloc,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>