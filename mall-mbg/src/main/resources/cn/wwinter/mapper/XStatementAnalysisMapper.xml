<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wwinter.mapper.XStatementAnalysisMapper">
  <resultMap id="BaseResultMap" type="cn.wwinter.model.XStatementAnalysis">
    <result column="db" jdbcType="VARCHAR" property="db" />
    <result column="full_scan" jdbcType="VARCHAR" property="fullScan" />
    <result column="exec_count" jdbcType="BIGINT" property="execCount" />
    <result column="exec_secondary_count" jdbcType="BIGINT" property="execSecondaryCount" />
    <result column="err_count" jdbcType="BIGINT" property="errCount" />
    <result column="warn_count" jdbcType="BIGINT" property="warnCount" />
    <result column="total_latency" jdbcType="BIGINT" property="totalLatency" />
    <result column="max_latency" jdbcType="BIGINT" property="maxLatency" />
    <result column="avg_latency" jdbcType="BIGINT" property="avgLatency" />
    <result column="lock_latency" jdbcType="BIGINT" property="lockLatency" />
    <result column="cpu_latency" jdbcType="BIGINT" property="cpuLatency" />
    <result column="rows_sent" jdbcType="BIGINT" property="rowsSent" />
    <result column="rows_sent_avg" jdbcType="DECIMAL" property="rowsSentAvg" />
    <result column="rows_examined" jdbcType="BIGINT" property="rowsExamined" />
    <result column="rows_examined_avg" jdbcType="DECIMAL" property="rowsExaminedAvg" />
    <result column="rows_affected" jdbcType="BIGINT" property="rowsAffected" />
    <result column="rows_affected_avg" jdbcType="DECIMAL" property="rowsAffectedAvg" />
    <result column="tmp_tables" jdbcType="BIGINT" property="tmpTables" />
    <result column="tmp_disk_tables" jdbcType="BIGINT" property="tmpDiskTables" />
    <result column="rows_sorted" jdbcType="BIGINT" property="rowsSorted" />
    <result column="sort_merge_passes" jdbcType="BIGINT" property="sortMergePasses" />
    <result column="max_controlled_memory" jdbcType="BIGINT" property="maxControlledMemory" />
    <result column="max_total_memory" jdbcType="BIGINT" property="maxTotalMemory" />
    <result column="digest" jdbcType="VARCHAR" property="digest" />
    <result column="first_seen" jdbcType="TIMESTAMP" property="firstSeen" />
    <result column="last_seen" jdbcType="TIMESTAMP" property="lastSeen" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.wwinter.model.XStatementAnalysis">
    <result column="query" jdbcType="LONGVARCHAR" property="query" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    db, full_scan, exec_count, exec_secondary_count, err_count, warn_count, total_latency, 
    max_latency, avg_latency, lock_latency, cpu_latency, rows_sent, rows_sent_avg, rows_examined, 
    rows_examined_avg, rows_affected, rows_affected_avg, tmp_tables, tmp_disk_tables, 
    rows_sorted, sort_merge_passes, max_controlled_memory, max_total_memory, digest, 
    first_seen, last_seen
  </sql>
  <sql id="Blob_Column_List">
    query
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.wwinter.model.XStatementAnalysisExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from x$statement_analysis
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.wwinter.model.XStatementAnalysisExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from x$statement_analysis
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.wwinter.model.XStatementAnalysisExample">
    delete from x$statement_analysis
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wwinter.model.XStatementAnalysis">
    insert into x$statement_analysis (db, full_scan, exec_count, 
      exec_secondary_count, err_count, warn_count, 
      total_latency, max_latency, avg_latency, 
      lock_latency, cpu_latency, rows_sent, 
      rows_sent_avg, rows_examined, rows_examined_avg, 
      rows_affected, rows_affected_avg, tmp_tables, 
      tmp_disk_tables, rows_sorted, sort_merge_passes, 
      max_controlled_memory, max_total_memory, digest, 
      first_seen, last_seen, query
      )
    values (#{db,jdbcType=VARCHAR}, #{fullScan,jdbcType=VARCHAR}, #{execCount,jdbcType=BIGINT}, 
      #{execSecondaryCount,jdbcType=BIGINT}, #{errCount,jdbcType=BIGINT}, #{warnCount,jdbcType=BIGINT}, 
      #{totalLatency,jdbcType=BIGINT}, #{maxLatency,jdbcType=BIGINT}, #{avgLatency,jdbcType=BIGINT}, 
      #{lockLatency,jdbcType=BIGINT}, #{cpuLatency,jdbcType=BIGINT}, #{rowsSent,jdbcType=BIGINT}, 
      #{rowsSentAvg,jdbcType=DECIMAL}, #{rowsExamined,jdbcType=BIGINT}, #{rowsExaminedAvg,jdbcType=DECIMAL}, 
      #{rowsAffected,jdbcType=BIGINT}, #{rowsAffectedAvg,jdbcType=DECIMAL}, #{tmpTables,jdbcType=BIGINT}, 
      #{tmpDiskTables,jdbcType=BIGINT}, #{rowsSorted,jdbcType=BIGINT}, #{sortMergePasses,jdbcType=BIGINT}, 
      #{maxControlledMemory,jdbcType=BIGINT}, #{maxTotalMemory,jdbcType=BIGINT}, #{digest,jdbcType=VARCHAR}, 
      #{firstSeen,jdbcType=TIMESTAMP}, #{lastSeen,jdbcType=TIMESTAMP}, #{query,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.wwinter.model.XStatementAnalysis">
    insert into x$statement_analysis
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="db != null">
        db,
      </if>
      <if test="fullScan != null">
        full_scan,
      </if>
      <if test="execCount != null">
        exec_count,
      </if>
      <if test="execSecondaryCount != null">
        exec_secondary_count,
      </if>
      <if test="errCount != null">
        err_count,
      </if>
      <if test="warnCount != null">
        warn_count,
      </if>
      <if test="totalLatency != null">
        total_latency,
      </if>
      <if test="maxLatency != null">
        max_latency,
      </if>
      <if test="avgLatency != null">
        avg_latency,
      </if>
      <if test="lockLatency != null">
        lock_latency,
      </if>
      <if test="cpuLatency != null">
        cpu_latency,
      </if>
      <if test="rowsSent != null">
        rows_sent,
      </if>
      <if test="rowsSentAvg != null">
        rows_sent_avg,
      </if>
      <if test="rowsExamined != null">
        rows_examined,
      </if>
      <if test="rowsExaminedAvg != null">
        rows_examined_avg,
      </if>
      <if test="rowsAffected != null">
        rows_affected,
      </if>
      <if test="rowsAffectedAvg != null">
        rows_affected_avg,
      </if>
      <if test="tmpTables != null">
        tmp_tables,
      </if>
      <if test="tmpDiskTables != null">
        tmp_disk_tables,
      </if>
      <if test="rowsSorted != null">
        rows_sorted,
      </if>
      <if test="sortMergePasses != null">
        sort_merge_passes,
      </if>
      <if test="maxControlledMemory != null">
        max_controlled_memory,
      </if>
      <if test="maxTotalMemory != null">
        max_total_memory,
      </if>
      <if test="digest != null">
        digest,
      </if>
      <if test="firstSeen != null">
        first_seen,
      </if>
      <if test="lastSeen != null">
        last_seen,
      </if>
      <if test="query != null">
        query,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="db != null">
        #{db,jdbcType=VARCHAR},
      </if>
      <if test="fullScan != null">
        #{fullScan,jdbcType=VARCHAR},
      </if>
      <if test="execCount != null">
        #{execCount,jdbcType=BIGINT},
      </if>
      <if test="execSecondaryCount != null">
        #{execSecondaryCount,jdbcType=BIGINT},
      </if>
      <if test="errCount != null">
        #{errCount,jdbcType=BIGINT},
      </if>
      <if test="warnCount != null">
        #{warnCount,jdbcType=BIGINT},
      </if>
      <if test="totalLatency != null">
        #{totalLatency,jdbcType=BIGINT},
      </if>
      <if test="maxLatency != null">
        #{maxLatency,jdbcType=BIGINT},
      </if>
      <if test="avgLatency != null">
        #{avgLatency,jdbcType=BIGINT},
      </if>
      <if test="lockLatency != null">
        #{lockLatency,jdbcType=BIGINT},
      </if>
      <if test="cpuLatency != null">
        #{cpuLatency,jdbcType=BIGINT},
      </if>
      <if test="rowsSent != null">
        #{rowsSent,jdbcType=BIGINT},
      </if>
      <if test="rowsSentAvg != null">
        #{rowsSentAvg,jdbcType=DECIMAL},
      </if>
      <if test="rowsExamined != null">
        #{rowsExamined,jdbcType=BIGINT},
      </if>
      <if test="rowsExaminedAvg != null">
        #{rowsExaminedAvg,jdbcType=DECIMAL},
      </if>
      <if test="rowsAffected != null">
        #{rowsAffected,jdbcType=BIGINT},
      </if>
      <if test="rowsAffectedAvg != null">
        #{rowsAffectedAvg,jdbcType=DECIMAL},
      </if>
      <if test="tmpTables != null">
        #{tmpTables,jdbcType=BIGINT},
      </if>
      <if test="tmpDiskTables != null">
        #{tmpDiskTables,jdbcType=BIGINT},
      </if>
      <if test="rowsSorted != null">
        #{rowsSorted,jdbcType=BIGINT},
      </if>
      <if test="sortMergePasses != null">
        #{sortMergePasses,jdbcType=BIGINT},
      </if>
      <if test="maxControlledMemory != null">
        #{maxControlledMemory,jdbcType=BIGINT},
      </if>
      <if test="maxTotalMemory != null">
        #{maxTotalMemory,jdbcType=BIGINT},
      </if>
      <if test="digest != null">
        #{digest,jdbcType=VARCHAR},
      </if>
      <if test="firstSeen != null">
        #{firstSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="lastSeen != null">
        #{lastSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="query != null">
        #{query,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wwinter.model.XStatementAnalysisExample" resultType="java.lang.Integer">
    select count(*) from x$statement_analysis
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update x$statement_analysis
    <set>
      <if test="record.db != null">
        db = #{record.db,jdbcType=VARCHAR},
      </if>
      <if test="record.fullScan != null">
        full_scan = #{record.fullScan,jdbcType=VARCHAR},
      </if>
      <if test="record.execCount != null">
        exec_count = #{record.execCount,jdbcType=BIGINT},
      </if>
      <if test="record.execSecondaryCount != null">
        exec_secondary_count = #{record.execSecondaryCount,jdbcType=BIGINT},
      </if>
      <if test="record.errCount != null">
        err_count = #{record.errCount,jdbcType=BIGINT},
      </if>
      <if test="record.warnCount != null">
        warn_count = #{record.warnCount,jdbcType=BIGINT},
      </if>
      <if test="record.totalLatency != null">
        total_latency = #{record.totalLatency,jdbcType=BIGINT},
      </if>
      <if test="record.maxLatency != null">
        max_latency = #{record.maxLatency,jdbcType=BIGINT},
      </if>
      <if test="record.avgLatency != null">
        avg_latency = #{record.avgLatency,jdbcType=BIGINT},
      </if>
      <if test="record.lockLatency != null">
        lock_latency = #{record.lockLatency,jdbcType=BIGINT},
      </if>
      <if test="record.cpuLatency != null">
        cpu_latency = #{record.cpuLatency,jdbcType=BIGINT},
      </if>
      <if test="record.rowsSent != null">
        rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      </if>
      <if test="record.rowsSentAvg != null">
        rows_sent_avg = #{record.rowsSentAvg,jdbcType=DECIMAL},
      </if>
      <if test="record.rowsExamined != null">
        rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      </if>
      <if test="record.rowsExaminedAvg != null">
        rows_examined_avg = #{record.rowsExaminedAvg,jdbcType=DECIMAL},
      </if>
      <if test="record.rowsAffected != null">
        rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      </if>
      <if test="record.rowsAffectedAvg != null">
        rows_affected_avg = #{record.rowsAffectedAvg,jdbcType=DECIMAL},
      </if>
      <if test="record.tmpTables != null">
        tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      </if>
      <if test="record.tmpDiskTables != null">
        tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      </if>
      <if test="record.rowsSorted != null">
        rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      </if>
      <if test="record.sortMergePasses != null">
        sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      </if>
      <if test="record.maxControlledMemory != null">
        max_controlled_memory = #{record.maxControlledMemory,jdbcType=BIGINT},
      </if>
      <if test="record.maxTotalMemory != null">
        max_total_memory = #{record.maxTotalMemory,jdbcType=BIGINT},
      </if>
      <if test="record.digest != null">
        digest = #{record.digest,jdbcType=VARCHAR},
      </if>
      <if test="record.firstSeen != null">
        first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastSeen != null">
        last_seen = #{record.lastSeen,jdbcType=TIMESTAMP},
      </if>
      <if test="record.query != null">
        query = #{record.query,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update x$statement_analysis
    set db = #{record.db,jdbcType=VARCHAR},
      full_scan = #{record.fullScan,jdbcType=VARCHAR},
      exec_count = #{record.execCount,jdbcType=BIGINT},
      exec_secondary_count = #{record.execSecondaryCount,jdbcType=BIGINT},
      err_count = #{record.errCount,jdbcType=BIGINT},
      warn_count = #{record.warnCount,jdbcType=BIGINT},
      total_latency = #{record.totalLatency,jdbcType=BIGINT},
      max_latency = #{record.maxLatency,jdbcType=BIGINT},
      avg_latency = #{record.avgLatency,jdbcType=BIGINT},
      lock_latency = #{record.lockLatency,jdbcType=BIGINT},
      cpu_latency = #{record.cpuLatency,jdbcType=BIGINT},
      rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      rows_sent_avg = #{record.rowsSentAvg,jdbcType=DECIMAL},
      rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      rows_examined_avg = #{record.rowsExaminedAvg,jdbcType=DECIMAL},
      rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      rows_affected_avg = #{record.rowsAffectedAvg,jdbcType=DECIMAL},
      tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      max_controlled_memory = #{record.maxControlledMemory,jdbcType=BIGINT},
      max_total_memory = #{record.maxTotalMemory,jdbcType=BIGINT},
      digest = #{record.digest,jdbcType=VARCHAR},
      first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      last_seen = #{record.lastSeen,jdbcType=TIMESTAMP},
      query = #{record.query,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update x$statement_analysis
    set db = #{record.db,jdbcType=VARCHAR},
      full_scan = #{record.fullScan,jdbcType=VARCHAR},
      exec_count = #{record.execCount,jdbcType=BIGINT},
      exec_secondary_count = #{record.execSecondaryCount,jdbcType=BIGINT},
      err_count = #{record.errCount,jdbcType=BIGINT},
      warn_count = #{record.warnCount,jdbcType=BIGINT},
      total_latency = #{record.totalLatency,jdbcType=BIGINT},
      max_latency = #{record.maxLatency,jdbcType=BIGINT},
      avg_latency = #{record.avgLatency,jdbcType=BIGINT},
      lock_latency = #{record.lockLatency,jdbcType=BIGINT},
      cpu_latency = #{record.cpuLatency,jdbcType=BIGINT},
      rows_sent = #{record.rowsSent,jdbcType=BIGINT},
      rows_sent_avg = #{record.rowsSentAvg,jdbcType=DECIMAL},
      rows_examined = #{record.rowsExamined,jdbcType=BIGINT},
      rows_examined_avg = #{record.rowsExaminedAvg,jdbcType=DECIMAL},
      rows_affected = #{record.rowsAffected,jdbcType=BIGINT},
      rows_affected_avg = #{record.rowsAffectedAvg,jdbcType=DECIMAL},
      tmp_tables = #{record.tmpTables,jdbcType=BIGINT},
      tmp_disk_tables = #{record.tmpDiskTables,jdbcType=BIGINT},
      rows_sorted = #{record.rowsSorted,jdbcType=BIGINT},
      sort_merge_passes = #{record.sortMergePasses,jdbcType=BIGINT},
      max_controlled_memory = #{record.maxControlledMemory,jdbcType=BIGINT},
      max_total_memory = #{record.maxTotalMemory,jdbcType=BIGINT},
      digest = #{record.digest,jdbcType=VARCHAR},
      first_seen = #{record.firstSeen,jdbcType=TIMESTAMP},
      last_seen = #{record.lastSeen,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>